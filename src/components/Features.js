import Card from "./Card";
import imgDeclerative from "../resources/feature-growth-graph.png"
import imgJsx from "../resources/feature-jsx.png"
import imgComponents from "../resources/features-customer-support.png"
import imgVirtualDOM from "../resources/features-virtual-dom.png"
import imgDataFlow from "../resources/features-data-flow.png"
import imgState from "../resources/features-state.png"

function Features() {

    const cardListData = [
        {
            title: "Declerative",
            imgSrc: imgDeclerative,
            imgAlt: "declerative",
            description: "ReactJS follows a declarative programming paradigm. In React, you declare (/define) how the UI should look when the state changes, and React core takes care of rendering the user interface. In other words, React allows you to focus on the output without you having to worry about how to achieve the output. Many other modern app development frameworks like Vue and Flutter also follow a declarative programming style. Declarative programming is generally high level and aids in speed development, debugging, collaborative coding as well as app scalability. ",
            link: "aa"

        },
        {
            title: "Assembly of Components",
            imgSrc: imgComponents,
            imgAlt: "assembly-of-components",
            description: "One of the notable features of ReactJS is component-based user interface development. A typical React app is an assembly of multiple components. These components are either core ReactJS components, app-specific custom components, or reusable components provided by external libraries. React enables you to create standalone isolated components that you can use across apps. This feature of React helps improves reusability, faster development, and lesser UI defects. In ReactJS, you can define components as either javascript functions or ES6 classes.",
            link: "aa"
        },
        {
            title: "JSX",
            imgSrc: imgJsx,
            imgAlt: "jsx",
            description: "JSX is another important feature of ReactJS. JSX stands for Javascript Syntax extension and enhances javascript functionality to make UI development easy. When you work in React, you can use JSX to easily embed HTML within Javascript itself. This helps in writing more readable and maintainable code. While JSX is not mandatory but without using JSX in ReactJS your code will become complex and difficult to maintain. Given below is a small example of JSX.",
            link: "aa"
        },
        {
            title: "Virtual DOM",
            imgSrc: imgVirtualDOM,
            imgAlt: "declerative",
            description: "React Virtual DOM is something that changed the game of frontend development. React framework was the first mainstream UI development framework to use the Virtual DOM design pattern. Technically speaking, Virtual DOM is an in-memory copy of the actual DOM generated by the browser. ",
            link: "aa"

        },
        {
            title: "Data Flow Pattern",
            imgSrc: imgDataFlow,
            imgAlt: "assembly-of-components",
            description: "Defining the overall data flow pattern is critical to the core design of any application or framework. In React, you can implement a unidirectional data flow pattern easily.",
            link: "aa"
        },
        {
            title: "State Management",
            imgSrc: imgState,
            imgAlt: "jsx",
            description: "ReactJS utilizes one of the most sophisticated state management libraries like Redux. Typically, for small apps that include only a few UI components, you can keep Redux aside and manage the state within the components. However as the application grows, managing the state in individual components becomes challenging and a central app-level state store comes in handy. State management library like Redux provides developers with the capabilities to retrieve and set state from components to the state store.",
            link: "aa"
        }
    ]

    return (
        <section className="features">
            {cardListData.map((el) => <Card title={el.title} imgSrc={el.imgSrc} imgAlt={el.imgAlt} description={el.description} link={el.link} />)}
        </section>

    )
}

export default Features;